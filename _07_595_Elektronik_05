// 
// /~~\ /~~\ |\  |~|~/~~  |~~\ /~~\ |~~\ /~~\~~|~~/~~\
// `--.|    || \ | ||     |__/|    ||--<|    | |  `--.
// \__/ \__/ |  \|_|_\__  |  \ \__/ |__/ \__/  |  \__/
//
// Contributors: Moritz Simon Geist, LennartS
// 01/2015, v.05: Triggercontrol added
//
// === Recources: ===
// 1. 
// 2. MIDI Library https://github.com/FortySevenEffects/arduino_midi_library (used: c4.2.)
// 3. SimpleTimer Library http://playground.arduino.cc/Code/SimpleTimer
// 
// 

#include <MIDI.h>
#include <midi_Defs.h>
#include <midi_Message.h>
#include <midi_Namespace.h>
#include <midi_Settings.h>
// #include <SimpleTimer.h>

MIDI_CREATE_DEFAULT_INSTANCE();



//  Here we can rearrange the pin assignment, in case that we want one pin to be connected with another Midi Note

#define channels 25 // Number of channels
 //             PIN    0  ,1  ,2  ,3  ,4  ,5  ,6  ,7  ,8  ,9  ,10  ,11  ,12  ,13  ,14  ,15  ,16  ,17  ,18  ,19  ,20  ,21  ,22  ,23  ,24 
int array[channels] = {0  ,1  ,2  ,3  ,4  ,5  ,6  ,7  ,8  ,9  ,10  ,11  ,12  ,13  ,14  ,15  ,16  ,17  ,18  ,19  ,20  ,21  ,22  ,23  ,24 };

//  +-------+------------------------+-------+---------+-------------+---------------+
//  | Bez 1 |          Bez2          | Bez3  | Pin 595 | Pin Arduino | Atmega Intern |
//  +-------+------------------------+-------+---------+-------------+---------------+
//  | SER   | Serial Data Input      | DS    |      14 |          11 | B,3           |
//  | RCK   | Register Clock Pin     | SH_CP |      12 |           8 | B,0           |
//  | SRCK  | Storage Register Clock | ST_CP |      11 |          12 | B,4           |
//  +-------+------------------------+-------+---------+-------------+---------------+ 

#define SHIFTREGISTER_SER B,3  // Serial Data Input DS, 11
#define SHIFTREGISTER_RCK B,0  // Register Clock Pin (SH_CP) ,12
#define SHIFTREGISTER_SRCK B,4 // Storage Register Clock ST_CP, 8

#include "ChainedShiftReg.h"
ChainedShiftReg shiftReg;

// SimpleTimer midichaos; // Send a midi OFF Note to all channels when no NoteOff has been send for X seconds

void setup() {
        pinMode(13, OUTPUT);
        pinMode(2, INPUT_PULLUP);pinMode(7, INPUT_PULLUP);pinMode(4, INPUT_PULLUP);pinMode(5, INPUT_PULLUP); // the pins for the coded channel switch with build in PULLUP resistors
	shiftReg.init();
        MIDI.setHandleNoteOn(HandleNoteOn); // 
        MIDI.setHandleNoteOff(HandleNoteOff); // 
        MIDI.begin(setchannel());                     // listens on only channel wich is set up with the coded rotyr encoder
        setall(0);// All OFF
             }
//    midichaos.setInterval(1000, AllOff);


void loop() {
                MIDI.read();
             
            }
void HandleNoteOn(byte channel, byte note, byte velocity)
{          
  int counter = note-60;
  shiftReg.setPin(array[counter],ChainedShiftReg::ON);
  digitalWrite (13, HIGH); 
//  midichaos.run();
}

void HandleNoteOff(byte channel, byte note, byte velocity)
{          
  int counter = note-60;
  shiftReg.setPin(array[counter],ChainedShiftReg::OFF);
  digitalWrite (13, LOW);
}



void setall (int state) // 0 --> off 1 --> ON
{
   
 for (int i=0; i < channels; i++){
      if (state == 0) shiftReg.setPin(i,ChainedShiftReg::OFF);
      if (state == 1) shiftReg.setPin(i,ChainedShiftReg::ON);
    }

}

///////////////////////////////////////////////////////

byte setchannel() // Readout the Coded switch on PIN 2,4,5,7 on Startup. To set the MIDI Channel (1-16)
{
byte i;
bitWrite(i, 0, !digitalRead(5));
bitWrite(i, 1, !digitalRead(7));
bitWrite(i, 2, !digitalRead(2));
bitWrite(i, 3, !digitalRead(4));

return i+1; //+1 .. nullausgleich
}
